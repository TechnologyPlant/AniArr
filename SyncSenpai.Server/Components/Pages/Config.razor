@page "/config"
@using SyncSenpai.Ani.Entities
@using SyncSenpai.Ani.Repositories
@using SyncSenpai.Ani.Services
@using SyncSenpai.Server.Components.Components
@using SyncSenpai.Server.Entities.External
@using SyncSenpai.Server.Entities.External.AnilistResponse.WatchList
@using System.Text.Json

@inject IConfigRepository ConfigRepository
@inject IAniService AniService
@inject IToastService ToastService
@inject ILogger<Config> Logger


<h3>Configuration</h3>

@if (_loaded)
{
    <div>
        <span>Target Username:</span>
        <InputText @bind-Value="_configModel.UserName" @bind-Value:after="UsernameChanged" />
    </div>
    <div>
        <button @onclick="@TestUser">Test</button>
        <button @onclick="@ClearWatchlist">Clear</button>
        <button @onclick="SaveConfig" disabled="@_saveDisabled">Save</button>
    </div>
    <div>
        @foreach (var list in _mediaLists)
        {
            <span>@list.Name</span>
            <ul>
                @foreach (var entry in list.Entries)
                {
                    <li>@entry.Media.Title.English</li>
                }
            </ul>
        }
    </div>

    <br />
    <SonarrConfig/>

    <br />
    <h3>AniList to TVDB JSON</h3>
    <div>
        <span>Last Updated: </span>
        @if (_configModel.FribbListLastUpdated is not null)
        {
            <ToLocal DateTime="@_configModel.FribbListLastUpdated.Value" Format="mmm dd yyyy hh:MM:ss"></ToLocal>
        }
    </div>
    <div>
        <InputFile OnChange="LoadJson">Upload JSON</InputFile>
    </div>
    <div>
        <button @onclick="ParseJson" disabled="@_parseJsonDisabled">Parse JSON</button>
    </div>
    <div>
        <button @onclick="SaveJson" disabled="@_saveJsonDisabled">Save JSON</button>
    </div>

}


@code {
    bool _loaded;

    private ConfigModel _configModel = new();
    private List<MediaList> _mediaLists = [];
    private bool _saveDisabled => !_successfulAniConnect || !_configModified;
    private bool _configModified = false;
    private bool _successfulAniConnect = false;


    protected override async Task OnInitializedAsync()
    {
        _configModel = await ConfigRepository.GetConfigAsync();

        _loaded = true;
        await base.OnInitializedAsync();
    }

    private async Task SaveConfig()
    {
        await ConfigRepository.StoreConfigAsync(_configModel);
        _configModified = false;

        ToastService.ShowSuccess("Configuration Saved");
    }

    private async Task TestUser()
    {
        try
        {
            var root = await AniService.GetUserWatchListAsync(_configModel.UserName);
            _mediaLists = root.Data.MediaListCollection.Lists;
        }
        catch (Exception ex)
        {
            Logger.LogError(0, ex, ex.Message);
            ToastService.ShowError($"Unable to load watchlist data for user {_configModel.UserName}");
            return;
        }
        _successfulAniConnect = true;
    }
    private void UsernameChanged()
    {
        _configModified = true;
        _successfulAniConnect = false;
    }
    private void ClearWatchlist() => _mediaLists.Clear();

    private IBrowserFile? _jsonFile;
    private List<FribbAniListItem>? _jsonList;

    private bool _parseJsonDisabled => _jsonFile is null;
    private bool _saveJsonDisabled => _jsonList is null;

    private void LoadJson(InputFileChangeEventArgs args)
    {
        _jsonFile = args.File;
    }
    private async Task ParseJson()
    {
        if (_jsonFile is null) return;

        var stream = _jsonFile.OpenReadStream(10_000_000);

        _jsonList = await JsonSerializer.DeserializeAsync<List<FribbAniListItem>>(stream);

        if (_jsonList != null)
        {
            ToastService.ShowSuccess($"Parsed {_jsonFile.Name} into list.");
        }
        else
        {
            ToastService.ShowError("Unabled to convert file to expected format.");
        }

    }
    private async Task SaveJson()
    {
        List<Task> saveTasks = [];
        if (_jsonList is null) return;
        try
        {
            await ConfigRepository.StoreFribbItems(_jsonList, _configModel);
            ToastService.ShowSuccess($"Saved  anilist entries.");
        }
        catch (Exception ex)
        {
            Logger.LogError(0, ex, ex.Message);
            ToastService.ShowError($"Exception during saving entries.");
            throw;
        }
    }
   
}
